name: CMake Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release
  CXX_STANDARD: 17

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: macos-latest
            cc: clang
            cxx: clang++

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew update
          brew install cmake
        fi

    - name: Configure CMake
      working-directory: ./build
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_CXX_STANDARD=${{ env.CXX_STANDARD }} \
          -DCMAKE_C_COMPILER=${{ matrix.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}

    - name: Build
      working-directory: ./build
      run: cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 2

    - name: Run Hello World Test
      working-directory: ./build
      run: |
        ./hello_world_application/hello_world | tee output.log
        grep -q "hello, world!" output.log || (echo "Hello World test failed!" && exit 1)
        echo "✓ Hello World test passed"

    - name: Run Solver Tests
      working-directory: ./build
      run: |
        # Test normal case
        echo "Testing equation solver (normal case):"
        OUTPUT=$(./solver_application/solve <<< "1 -3 2")
        echo "$OUTPUT"
        echo "$OUTPUT" | grep -q "x1 = 1.000000" || (echo "Root 1 mismatch" && exit 1)
        echo "$OUTPUT" | grep -q "x2 = 2.000000" || (echo "Root 2 mismatch" && exit 1)
        
        # Test single root case
        echo "Testing single root case:"
        OUTPUT=$(./solver_application/solve <<< "1 -2 1")
        echo "$OUTPUT"
        echo "$OUTPUT" | grep -q "x = 1.000000" || (echo "Single root mismatch" && exit 1)
        
        # Test error case
        echo "Testing error handling:"
        OUTPUT=$(./solver_application/solve <<< "1 1 1" 2>&1 || true)
        echo "$OUTPUT"
        if ! (echo "$OUTPUT" | grep -q "no real roots") && \
           ! (echo "$OUTPUT" | grep -q "discriminant < 0"); then
          echo "Error: Unexpected error message"
          exit 1
        fi
        echo "✓ All solver tests passed"

    - name: Run CTest
      working-directory: ./build
      run: ctest --output-on-failure

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}
        path: |
          ./build/**/test-results/*.xml
          ./build/Testing/**/*.xml
